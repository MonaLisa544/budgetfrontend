import 'dart:convert';
import 'dart:io';
import 'package:budgetfrontend/models/budget_model.dart';
import 'package:budgetfrontend/models/family_model.dart';
import 'package:budgetfrontend/models/user_model.dart';
import 'package:budgetfrontend/models/wallet_model.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

import 'package:onesignal_flutter/onesignal_flutter.dart';

import 'package:dio/dio.dart';

class AuthService {
  static const String _baseUrl = "http://192.168.1.4:3001";
   static Dio dio = Dio();

  // –¢–æ–∫–µ–Ω —Ö–∞–¥–≥–∞–ª–∞—Ö
  static Future<void> storeToken(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('auth_token', token);
  }
 
  // –¢–æ–∫–µ–Ω –∞–≤–∞—Ö
  static Future<String?> getToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('auth_token');
  }

  static Future<String?> getPlayerId() async {
  final pushSubscription = await OneSignal.User.pushSubscription;
  return pushSubscription.id;
}


  // –ù—ç–≤—Ç—Ä—ç—Ö
  static Future<bool> login(String email, String password) async {
    final url = Uri.parse("$_baseUrl/users/sign_in");
    final response = await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'user': {'email': email, 'password': password}}),
    );
    if (response.statusCode == 200 || response.statusCode == 201) {
  final data = jsonDecode(response.body);
  if (data.containsKey('token')) {
    await storeToken(data['token']); // —ç—Ö–ª—ç—ç–¥ —Ç–æ–∫–µ–Ω —Ö–∞–¥–≥–∞–ª–Ω–∞

    final playerId = await AuthService.getPlayerId(); // –¥–∞—Ä–∞–∞ –Ω—å PlayerID –∞–≤–Ω–∞
    if (playerId != null) {
      sendPlayerIdToBackend(playerId); // —Ç–æ–∫–µ–Ω –±–∞–π–≥–∞–∞ —Ç—É–ª server —Ä—É—É player_id —è–≤—É—É–ª–Ω–∞
    }

    return true;
  }
}
    return false;
  }

 static void sendPlayerIdToBackend(String playerId) async {
  var url = Uri.parse('$_baseUrl/users/player_id'); // üî• –≠–Ω–¥ ”©”©—Ä–∏–π–Ω backend url —Ç–∞–≤–∏–Ω–∞
 final token = await AuthService.getToken();// üî• –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω access_token —Ç–∞–≤–∏–Ω–∞

  try {
    var response = await http.patch(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: json.encode({
        'player_id': playerId,
      }),
    );

    if (response.statusCode == 200) {
      print('‚úÖ Player ID backend —Ä—É—É –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç!');
    } else {
      print('‚ùå –ê–ª–¥–∞–∞: ${response.statusCode} - ${response.body}');
    }
  } catch (e) {
    print('‚ùó Exception: $e');
  }
}
  

  // –ë“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö
  static Future<bool> signup(String lastName, String firstName, String email, String password, String confirmPassword) async {
    final url = Uri.parse("$_baseUrl/users");
    final response = await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'user': {
          'lastName': lastName,
          'firstName': firstName,
          'email': email,
          'password': password,
          'password_confirmation': confirmPassword,
        }
      }),
    );

    if (response.statusCode == 200 || response.statusCode == 201) {
      final data = jsonDecode(response.body);
      
      if (data.containsKey('token')) {
        await storeToken(data['token']);
        return true;
      }
       final playerId = await getPlayerId();
      if (playerId != null) {
        sendPlayerIdToBackend(playerId);
        print('‚úÖ Player ID —Å–µ—Ä–≤–µ—Ä —Ä“Ø“Ø –∏–ª–≥—ç—ç–ª—ç—ç!');
      } else {
        print('‚ö†Ô∏è Player ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π!');
      }
    }
    return false;
  }

 //”©”©—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö 
 static Future<UserModel?> getMe() async {
  final token = await getToken();
  if (token == null) {
    print('‚ùå –¢–æ–∫–µ–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π');
    return null;
  }

  final response = await http.get(
    Uri.parse("$_baseUrl/users/me"),
    headers: {'Authorization': 'Bearer $token'},
  );

  print('‚úÖ /users/me API Response Code: ${response.statusCode}');
  print('‚úÖ /users/me API Body: ${response.body}');

  if (response.statusCode == 200) {
    final data = jsonDecode(response.body);

    final attributes = data['data']['attributes'];
    final relationships = data['data']['relationships'];

    return UserModel(
      id: int.parse(data['data']['id']),
      firstName: attributes['firstName'] ?? '',
      lastName: attributes['lastName'] ?? '',
      email: attributes['email'] ?? '',
      role: attributes['role'] ?? '',
      profilePhotoUrl: attributes['profile_photo'] ?? '',
      familyId: relationships['family']['data'] != null
          ? int.parse(relationships['family']['data']['id'])
          : null,
    );
  } else {
    print('‚ùå /users/me API –∞–º–∂–∏–ª—Ç–≥“Ø–π');
    return null;
  }
}

static Future<bool> updateProfile({
  required String firstName,
  required String lastName,
  required String email,
  File? profilePhotoFile,
}) async {
  final token = await getToken();
  if (token == null) return false;

  try {
    FormData formData = FormData.fromMap({
      'user[firstName]': firstName,
      'user[lastName]': lastName,
      'user[email]': email,
      if (profilePhotoFile != null)
        'profile_photo': await MultipartFile.fromFile(profilePhotoFile.path, filename: 'profile.jpg'),
    });

    final response = await Dio().put(
      "$_baseUrl/users/edit",
      data: formData,
      options: Options(
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'multipart/form-data',
        },
      ),
    );

    if (response.statusCode == 200) {
      print('‚úÖ Profile updated successfully');
      return true;
    } else {
      print('‚ùå Failed to update profile: ${response.statusCode}');
      return false;
    }
  } catch (e) {
    print('‚ùå Update Profile error: $e');
    return false;
  }
}


  // –ì–∞—Ä–∞—Ö
  static Future<void> logout() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('auth_token');
  }
  

  static Future<bool> changePassword({
  required String currentPassword,
  required String newPassword,
  required String confirmPassword,
}) async {
  final token = await getToken();
  if (token == null) return false;

  try {
    final response = await dio.post(
      '$_baseUrl/users/password_change', // ‚úÖ POST method
      data: {
        'current_password': currentPassword,
        'new_password': newPassword,
        'new_password_confirmation': confirmPassword,
      },
      options: Options(
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      ),
    );

    if (response.statusCode == 200) {
      print('‚úÖ Password changed successfully');
      return true;
    } else {
      print('‚ùå Password change failed: ${response.statusCode}');
      return false;
    }
  } catch (e) {
    print('‚ùå Password change error: $e');
    return false;
  }
}



  // -----------------------------------------------



    //my wallet 
     static Future<WalletModel?> fetchMyWallet() async {
    try {
      final token = await AuthService.getToken();
      final response = await dio.get(
        '$_baseUrl/api/v1/wallets/me',
        options: Options(
          headers: {
            'Authorization': 'Bearer $token',
          },
        ),
      );
      print('üì¶ My Wallet Response: ${response.data}'); 
      return WalletModel.fromJson(response.data['data']); // ‚úÖ –∑”©–≤
    } catch (e) {
      print('‚ùå fetchMyWallet error: $e');
      return null;
    }
  }
  

  //family wallet 
  static Future<WalletModel?> fetchFamilyWallet() async {
    try {
      final token = await AuthService.getToken();
      final response = await dio.get(
        '$_baseUrl/api/v1/wallets/family',
        options: Options(
          headers: {
            'Authorization': 'Bearer $token',
          },
        ),
      );
      print('üì¶ My Wallet Response: ${response.data}'); 
      return WalletModel.fromJson(response.data['data']); // ‚úÖ –∑”©–≤
    } catch (e) {
      print('‚ùå fetchFamilyWallet error: $e');
      return null;
    }
  }

  static Future<bool> updateMyWalletBalance(double balance) async {
    try {
      final token = await AuthService.getToken();
      await dio.put(
        '$_baseUrl/api/v1/wallets/update_me',
        data: {'balance': balance},
        options: Options(
          headers: {'Authorization': 'Bearer $token'},
        ),
      );
      return true;
    } catch (e) {
      print('‚ùå updateMyWalletBalance error: $e');
      return false;
    }
  }

  static Future<bool> updateFamilyWalletBalance(double balance) async {
    try {
      final token = await AuthService.getToken();
      await dio.put(
        '$_baseUrl/api/v1/wallets/update_family',
        data: {'balance': balance},
        options: Options(
          headers: {'Authorization': 'Bearer $token'},
        ),
      );
      return true;
    } catch (e) {
      print('‚ùå updateFamilyWalletBalance error: $e');
      return false;
    }
  }


  // -------------------------------------------
  // –ì—ç—Ä –±“Ø–ª–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
  static Future<FamilyModel?> getFamilyInfo() async {
    try {
      final token = await AuthService.getToken();
      final response = await dio.get(
        '$_baseUrl/api/v1/families/me',
        options: Options(headers: {
          'Authorization': 'Bearer $token',
        }),
      );

      final data = response.data['data'];
      return FamilyModel.fromJson(data);
    } catch (e) {
      print('‚ùå Family info —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: $e');
      return null;
    }
  }

  // –ì—ç—Ä –±“Ø–ª–∏–π–Ω –≥–∏—à“Ø“Ø–¥–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç –∞–≤–∞—Ö
 static Future<List<UserModel>> getFamilyMembers() async {
  try {
    final token = await AuthService.getToken();
    final response = await dio.get(
      '$_baseUrl/api/v1/families/members',
      options: Options(headers: {
        'Authorization': 'Bearer $token',
      }),
    );

    final List<dynamic> data = response.data['data'] as List<dynamic>; // üõ†Ô∏è –ò–ù–ì–≠–ñ –ê–®–ò–ì–õ–ê
    return data.map((e) => UserModel.fromJson(e)).toList();
  } catch (e) {
    print('‚ùå Family members —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: $e');
    return [];
  }
}

// services/auth_service.dart –¥–æ—Ç–æ—Ä:
static Future<bool> joinFamily({
  required String familyName,
  required String password,
}) async {
  try {
    final token = await getToken();
    if (token == null) {
      print('‚ùå –¢–æ–∫–µ–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π!');
      return false;
    }

    final response = await dio.post(
      '$_baseUrl/api/v1/families/join',
      data: {
        "family": {
          "family_name": familyName,
          "password": password,
        }
      },
      options: Options(
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      ),
    );

    print('üì¶ Join Family Response: ${response.statusCode} - ${response.data}');

    if (response.statusCode == 200 || response.statusCode == 201) {
      return true;
    } else {
      print('‚ùå –ì—ç—Ä –±“Ø–ª–¥ –Ω—ç–≥–¥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: ${response.statusCode}');
      return false;
    }
  } catch (e) {
    print('‚ùå joinFamily error: $e');
    return false;
  }
}


  // ---------------------------------------

   
}

